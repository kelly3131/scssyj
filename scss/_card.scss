

//한 리스트의 덩어리가 됨. 리스트형 변수는 1개만 쓰면 에러남. 무조건 2개 이상 써야함. (길던 짧던) 이것 자체로 배열이기 때문. 1개는 배열이될 수 없다. 
// '0px 4px 2px 0px rgba(6, 6, 6, 0.02)' 로 넣으면 에러나서 변수로 빼야함
$shadow1:0px 4px 2px 0px rgba(6, 6, 6, 0.1);
$shadow2:0px 4px 2px 0px rgba(6, 6, 6, 0.3);
//radius, shadow, width, height, bgColor, padding
$card : type1 20px $shadow1 165px 165px $white 20px,
type2 20px $shadow2 165px 165px $white 20px;

$cardIcon : (
    "ico1" :'../images/ico_list1_1.svg',
    "ico2" :'../images/ico_list1_2.svg',
    "ico3" :'../images/ico_list1_3.svg',
    "ico4" :'../images/ico_list1_4.svg',
);

@each $class, $radius, $shadow, $width, $height, $bgColor, $padding in $card {
    .card-#{$class} {
        border-radius: $radius;
        box-shadow: $shadow;
        width: $width;
        height: $height;
        background-color: $bgColor;
        padding: $padding;
    }
};


@each $class, $url in $cardIcon {
    .card-group > li.#{$class} {
        // .card-group은 grid역할만 하는것
        //ico1,2,,클래스명과 이미지경로만 바뀜
        // .card-group li.클래스명 {
        // background-image: 이미지경로;
        background-image: url(#{$url}) ;
        background-position: right 16px bottom 16px;
        background-repeat: no-repeat;
        // 이미지가 있을 수도 있고 없을 수도 있어서 각각 따로 빼는거다 -image, -position..
        
    }
}

//border-radius , box-shadow, width, height, background
//grid를 제외한 딱 하나의 카드만봤을 때.  확대할 경우엔 ratio가야함 

// 배열중에 딱 하나만 쓰고싶다면? map get쓰면 됨. 
// 배열중에 하나만 위치가 다르다면? 1개의 아이콘만 위치가 다르다면? 클래스를 하나 더 만든다.

.left-top-icon {
    background-image: url(#{map-get($map:$cardIcon, $key:ico1)}) ;
    //변수값 $cardIcon, 키값"ico1". 그 배열만 불러와진다. 
    //단독으로 쓰면 되는데, 속성(url)안에 쓰다보니 프리티어에서 쉼표를 자꾸 빼버린다. 값인줄알고.
    // map-get($map:맵변수이름, $key:키값) 이렇게 넣어야한다. 특수한 사항. 

    background-position: right 16px bottom 16px;
    background-repeat: no-repeat;
}

.card-group2 {
    border:1px solid red;
    a {
        @include background('ico_arrow_right_gray.svg', right 40px center);
        //믹스인은 맨 위에 넣어라. 
        //오른쪽으로 40px 떨어져있고 가운데에 있다. 
        @include box($grayca, 20px, 40px, 0px 8px 16px 0px #0000000F);
        display:block;
    }
}

//map형 변수는 한번만 입력해도돼. 키, 값이 명확해서 보기 쉽다.

$boxDesign : (
    1 :(
        "borderColor" : $grayca,
        "radius" : 20px,
        "padding" : 40px,
        "shadow" : 0px 8px 16px 0px #0000000f,
    ),
    2 :(
        "borderColor" : $yellow,
        "radius" : 10px,
        "padding" : 10px,
        "shadow" : 0px 2px 16px 0px #0000000f,
    ),
);

.box-type1 {
    @include box2($boxDesign, 1);
}
.box-type2 {
    @include box2($boxDesign, 2);
    @include tablet {
        font-size: 20px;
        color: orange;
    }
    @include mobile {
        font-size: 40px;
        color: pink;
    }
}

//웹이 위에있어서 반응형은 밑으로 넣어야한다 우선순위영향. 반응형은 큰거에서 작은걸로 내려와야한다. 반응형 제외한 인클루드는 맨 위에. 나머지 따로 정의하는 css는 중간에.


// .card-group3 > li {} 이것보다 네스팅기법으로 쓰는게 좋다. 그 사이에 속성을 못넣기 때문

// .card-group3 {
//     > li {
//         &:nth-child(1) {
//             @include background("ico_list1_1.svg", right 16px bottom 16px);
//         }
//     }
// }
// 불편한 이유: 태그가 100개면 100개의 다른 이미지경로를 지정해줘야한다. 
// for문 쓰고싶으면 마지막을 숫자로 해야한다. 숫자로 순환돌리는거니까. 

.card-group3 {
    > li {
        @for $index from 1 through 4 {
            //through 3 (3이하). to 3 ( 미만. 2까지) 
            //넘버를 여유있게 주면 좋다. 
            &.ico#{$index} {
                @include background("ico_list1_#{$index}.svg", right 16px bottom 16px);
            }
        }
    }
}

